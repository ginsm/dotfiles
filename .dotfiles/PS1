#!/bin/sh

# Set the color variables
c_time="\[\033[38;5;111m\]" # blue
c_carrot="\[\033[38;5;71m\]" # green
c_reset="\[$(tput sgr0)\]"  

# Set the git colors
git_clean="\033[38;5;71m" # green
git_unpushed="\033[0;33m" # yellow
git_dirty="\033[0;31m" # red

# Display local or remote connection (purple = local, yellow = remote)
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  c_dir="\[\033[0;33m\]"
else
  c_dir="\[\033[38;5;135m\]"
fi

# Assign color attributes
PS1time="${c_time}\A${c_reset}"
PS1basedir="${c_dir}\W${c_reset}"
PS1branch="\$(git_status)\$(git_branch)${c_reset}"
PS1end="${c_carrot}>${c_reset}"

# Set the PS1
PS1="${PS1time} ${PS1basedir} ${PS1branch}\n ${PS1end} "

# Get the current git branch
git_branch() {
  local branch=$(git branch 2>/dev/null | grep '^*' | colrm 1 2)
  if [ -n "$branch" ]
  then echo "(${branch})"
  fi
}

# Get the status of the current git branch
git_status() {
  # Inside of a git branch
  if [ -n "$(git_branch)" ]; then
    # Set up compare variables
    local status="$(git status)"
    local change="no changes added to commit"
    local change2="untracked files present"
    local unpushed="Your branch is ahead of"
    local staged="Changes to be committed"
    local clean="nothing to commit"
    # Repository is dirty
    if [[ ( "${status}" =~ "${change}" ) || ( "${status}" =~ "${change2}" ) || ( ${status} =~ "${staged}" ) ]]
    then echo -e "${git_dirty}"
    # Repository has unpushed commits
    elif [[ "${status}" =~ "${unpushed}" ]]
      then echo -e "${git_unpushed}"
    # Repository is clean
    elif [[ "${status}" =~ "${clean}" ]]
      then echo -e "${git_clean}"
    fi
  fi
}
